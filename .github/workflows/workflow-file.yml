name: Imagely Chrome Extension

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

jobs:
  validate:
    name: Validate Extension
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Validate manifest.json
        run: |
          echo "Validating manifest.json..."
          node -e "
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
            console.log('✅ Manifest is valid JSON');
            console.log('Extension name:', manifest.name);
            console.log('Version:', manifest.version);
            
            if (!manifest.name || !manifest.version) {
              throw new Error('Missing required fields');
            }
            if (manifest.manifest_version !== 3) {
              throw new Error('Must use Manifest V3');
            }
            console.log('✅ Basic manifest validation passed');
          "

      - name: Check required files
        run: |
          echo "Checking required files..."
          required_files=("manifest.json" "popup.html" "popup.js" "popup.css" "background.js" "content.js")
          
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists"
            else
              echo "❌ $file is missing"
              exit 1
            fi
          done

      - name: Lint JavaScript files
        run: |
          echo "Linting JavaScript files..."
          for file in *.js; do
            if [ -f "$file" ]; then
              echo "Checking syntax of $file..."
              node -c "$file" && echo "✅ $file syntax OK" || exit 1
            fi
          done

  build:
    name: Build Extension Package
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from manifest
        id: version
        run: |
          VERSION=$(node -p "require('./manifest.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extension version: $VERSION"

      - name: Create build directory
        run: |
          mkdir -p dist
          echo "Created dist directory"

      - name: Copy extension files
        run: |
          echo "Copying extension files..."
          cp manifest.json popup.html popup.js popup.css background.js content.js dist/
          
          # Copy icons if they exist
          for icon in icon-16.png icon-48.png icon-128.png; do
            if [ -f "$icon" ]; then
              cp "$icon" dist/
              echo "✅ Copied $icon"
            fi
          done

      - name: Create extension package
        run: |
          cd dist
          zip -r "../imagely-extension-v${{ steps.version.outputs.version }}.zip" .
          cd ..
          echo "✅ Created extension package"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: imagely-extension-v${{ steps.version.outputs.version }}
          path: imagely-extension-v${{ steps.version.outputs.version }}.zip
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from manifest
        id: version
        run: |
          VERSION=$(node -p "require('./manifest.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: imagely-extension-v${{ steps.version.outputs.version }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./imagely-extension-v${{ steps.version.outputs.version }}.zip
          asset_name: imagely-extension-v${{ steps.version.outputs.version }}.zip
          asset_content_type: application/zip