name: Imagely Chrome Extension

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

jobs:
  validate:
    name: Validate Extension
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install validation tools
        run: |
          npm install -g web-ext
          npm install -g eslint

      - name: Validate manifest.json
        run: |
          echo "Validating manifest.json..."
          node -e "
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
            console.log('‚úÖ Manifest is valid JSON');
            console.log('Extension name:', manifest.name);
            console.log('Version:', manifest.version);
            console.log('Manifest version:', manifest.manifest_version);
            
            // Basic validation
            if (!manifest.name || !manifest.version) {
              throw new Error('Missing required fields');
            }
            if (manifest.manifest_version !== 3) {
              throw new Error('Must use Manifest V3');
            }
            console.log('‚úÖ Basic manifest validation passed');
          "

      - name: Check required files
        run: |
          echo "Checking required files..."
          required_files=("manifest.json" "popup.html" "popup.js" "popup.css" "background.js" "content.js")
          
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ $file exists"
            else
              echo "‚ùå $file is missing"
              exit 1
            fi
          done

      - name: Lint JavaScript files
        run: |
          echo "Linting JavaScript files..."
          # Basic syntax check for JS files
          for file in *.js; do
            if [ -f "$file" ]; then
              echo "Checking syntax of $file..."
              node -c "$file" && echo "‚úÖ $file syntax OK" || exit 1
            fi
          done

      - name: Validate HTML files
        run: |
          echo "Validating HTML files..."
          for file in *.html; do
            if [ -f "$file" ]; then
              echo "Checking $file..."
              # Basic HTML validation - check if it's well-formed
              if grep -q "<!DOCTYPE html>" "$file"; then
                echo "‚úÖ $file has DOCTYPE"
              else
                echo "‚ö†Ô∏è $file missing DOCTYPE"
              fi
            fi
          done

      - name: Check for common issues
        run: |
          echo "Checking for common Chrome extension issues..."
          
          # Check for console.log statements (should be removed in production)
          if grep -r "console\.log" --include="*.js" .; then
            echo "‚ö†Ô∏è Found console.log statements - consider removing for production"
          fi
          
          # Check for localhost references
          if grep -r "localhost" --include="*.js" --include="*.html" .; then
            echo "‚ùå Found localhost references - not allowed in extensions"
            exit 1
          fi
          
          # Check for eval usage (not allowed in extensions)
          if grep -r "\beval\b" --include="*.js" .; then
            echo "‚ùå Found eval() usage - not allowed in extensions"
            exit 1
          fi
          
          echo "‚úÖ No common issues found"

  build:
    name: Build Extension Package
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from manifest
        id: version
        run: |
          VERSION=$(node -p "require('./manifest.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extension version: $VERSION"

      - name: Create build directory
        run: |
          mkdir -p dist
          echo "Created dist directory"

      - name: Copy extension files
        run: |
          echo "Copying extension files..."
          
          # Copy core files
          cp manifest.json dist/
          cp popup.html dist/
          cp popup.js dist/
          cp popup.css dist/
          cp background.js dist/
          cp content.js dist/
          
          # Copy icons if they exist
          if [ -d "icons" ]; then
            cp -r icons dist/
            echo "‚úÖ Copied icons directory"
          fi
          
          # Copy individual icon files if they exist
          for icon in icon-16.png icon-48.png icon-128.png; do
            if [ -f "$icon" ]; then
              cp "$icon" dist/
              echo "‚úÖ Copied $icon"
            fi
          done
          
          echo "‚úÖ All files copied to dist/"

      - name: List build contents
        run: |
          echo "Build contents:"
          ls -la dist/
          echo "Total files: $(find dist -type f | wc -l)"

      - name: Create extension package
        run: |
          cd dist
          zip -r "../imagely-extension-v${{ steps.version.outputs.version }}.zip" .
          cd ..
          
          echo "‚úÖ Created extension package"
          ls -la *.zip

      - name: Verify package contents
        run: |
          echo "Package contents:"
          unzip -l "imagely-extension-v${{ steps.version.outputs.version }}.zip"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: imagely-extension-v${{ steps.version.outputs.version }}
          path: |
            imagely-extension-v${{ steps.version.outputs.version }}.zip
            dist/
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from manifest
        id: version
        run: |
          VERSION=$(node -p "require('./manifest.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: imagely-extension-v${{ steps.version.outputs.version }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./imagely-extension-v${{ steps.version.outputs.version }}.zip
          asset_name: imagely-extension-v${{ steps.version.outputs.version }}.zip
          asset_content_type: application/zip

  # Optional: Auto-increment version on main branch
  version-bump:
    name: Auto Version Bump
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Auto-increment version
        run: |
          echo "Current version info:"
          CURRENT_VERSION=$(node -p "require('./manifest.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Parse version (assuming semantic versioning)
          IFS='.' read -ra ADDR <<< "$CURRENT_VERSION"
          MAJOR=${ADDR[0]}
          MINOR=${ADDR[1]}
          PATCH=${ADDR[2]}
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "New version: $NEW_VERSION"
          
          # Update manifest.json
          node -e "
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
            manifest.version = '$NEW_VERSION';
            fs.writeFileSync('manifest.json', JSON.stringify(manifest, null, 2) + '\n');
            console.log('‚úÖ Updated manifest.json to version $NEW_VERSION');
          "

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add manifest.json
          git commit -m "üîñ Bump version to $(node -p "require('./manifest.json').version")" || exit 0
          git push